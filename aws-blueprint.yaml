tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.9/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.1/plugin.yaml

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY

  ec2_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: ec2.us-east-1.amazonaws.com

  cloudify_image_username:
    default: centos

  local_ssh_directory:
    default: '~/.ssh/'

  manager_key_name:
    default: cfy-manager-key

  agent_key_name:
    default: cfy-agent-key

  cloudify_key_file:
    default: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }

  availability_zone:
    default: us-east-1e

  default_tags:
    default:
      owner: hello@getcloudify.org

  nat_image_id:
    description: >
      An AWS NAT instance AMI. Default is for region us-east-1.
      For other regions, search Community AMIs: amzn-ami-vpc-nat-pv-2014.09.1.x86_64-ebs.
    default: ami-224dc94a

  nat_instance_type:
    default: t1.micro

  nat_instance_block_device_mapping:
    default:
      '/dev/sda1':
        size: 8
        delete_on_termination: true

  cloudify_ami:
    description: >
      A Cloudify Manager AMI. Default is for region us-east-1.
      For other regions, search Community AMIs: Cloudify Community 17.3.31.
      If you choose to bootstrap, try: ami-ae7bfdb8.
      For other regions, reference official CentOS 7 AMI.
      See: https://wiki.centos.org/Cloud/AWS#head-78d1e3a4e6ba5c5a3847750d88266916ffe69648
    default: ami-3b6c092d

  cloudify_instance_type:
    default: m3.large

  ubuntu_trusty_image:
    default: ami-772aa961

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
    ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  manager_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: manager_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: agent_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  subnet0_nic_eip0:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      domain: vpc

  subnet0_nic_eip1:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      domain: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *client_config
      cidr_block: 10.10.0.0/16
      tags: { get_input: default_tags }

  internet_gateway:
    type: cloudify.aws.nodes.InternetGateway
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
    - type: cloudify.aws.relationships.gateway_connected_to_vpc
      target: vpc

  subnet0:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *client_config
      cidr_block: 10.10.0.0/24
      availability_zone: { get_input: availability_zone }
      tags: { get_input: default_tags }
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: vpc
    - type: cloudify.relationships.depends_on
      target: internet_gateway

  subnet1:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *client_config
      cidr_block: 10.10.1.0/24
      availability_zone: { get_input: availability_zone }
      tags: { get_input: default_tags }
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: vpc
    - type: cloudify.relationships.depends_on
      target: internet_gateway

  nat_instance_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      description: Cloudify Community AMI NAT Security Group
      rules:
      - ip_protocol: -1
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
    relationships:
    - type: cloudify.aws.relationships.security_group_contained_in_vpc
      target: vpc

  cloudify_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      description: Cloudify Community AMI Security Group
      rules:
      - ip_protocol: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 5671
        to_port: 5671
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 8101
        to_port: 8101
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 53333
        to_port: 53333
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 8300
        to_port: 8300
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 8301
        to_port: 8301
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 8500
        to_port: 8500
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 22000
        to_port: 22000
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 15432
        to_port: 15432
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
    relationships:
    - type: cloudify.aws.relationships.security_group_contained_in_vpc
      target: vpc

  subnet0_nic0:
    type: cloudify.aws.nodes.Interface
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
      - type: cloudify.aws.relationships.connected_to_subnet
        target: subnet0
      - type: cloudify.aws.relationships.connected_to_elastic_ip
        target: subnet0_nic_eip0
      - type: cloudify.aws.relationships.connected_to_security_group
        target: cloudify_security_group

  subnet0_nic1:
    type: cloudify.aws.nodes.Interface
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
      - type: cloudify.aws.relationships.connected_to_subnet
        target: subnet0
      - type: cloudify.aws.relationships.connected_to_elastic_ip
        target: subnet0_nic_eip1
      - type: cloudify.aws.relationships.connected_to_security_group
        target: nat_instance_security_group

  nat_instance:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      name: NAT Instance
      image_id: { get_input: nat_image_id }
      instance_type: { get_input: nat_instance_type }
      agent_config:
        install_method: none
      parameters:
        block_device_map: { get_input: nat_instance_block_device_mapping }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: aws.cloudify_aws.ec2.instance.modify_attributes
          inputs:
            new_attributes:
              sourceDestCheck: false
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet0
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: subnet0_nic1

  route_table0:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: subnet0
      - type: cloudify.aws.relationships.route_table_to_gateway
        target: internet_gateway

  route_table1:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.vpc.routetable.create_route_table
          inputs:
            routes:
              - destination_cidr_block: 0.0.0.0/0
                instance_id: { get_attribute: [ nat_instance, aws_resource_id ] }
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: subnet1
      - type: cloudify.relationships.connected_to
        target: nat_instance

  cloudify_host_cloud_config:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/cloud_config/create.py
          executor: central_deployment_agent
          inputs:
            cloud_config:
              users:
              - name: { get_input: cloudify_image_username }
                groups: sudo
                shell: /bin/bash
                sudo: ['ALL=(ALL) NOPASSWD:ALL']
                ssh-authorized-keys:
                - { get_attribute: [ manager_key, public_key_export ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: manager_key

  cloudify_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      name: Cloudify Manager
      agent_config:
        install_method: none
        user: { get_input: cloudify_image_username }
      image_id: { get_input: cloudify_ami }
      instance_type: { get_input: cloudify_instance_type }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: subnet0_nic0

outputs:

  Bootstrap:
    value:
      Step0a-Upload-Key:
        concat:
        - 'cat '
        - { get_input: cloudify_key_file  }
        - ' | '
        - 'ssh -i '
        - { get_input: cloudify_key_file  }
        - ' '
        - { get_input: cloudify_image_username }
        - '@'
        - { get_attribute: [ subnet0_nic_eip0, aws_resource_id ] }
        - ' '''
        - 'cat >> ~/.ssh/key.pem && chmod 600 ~/.ssh/key.pem'
        - ''''
      Step0b-Install-Cloudify-CLI:
        concat:
        - 'ssh -t -i '
        - { get_input: cloudify_key_file  }
        - ' '
        - { get_input: cloudify_image_username }
        - '@'
        - { get_attribute: [ subnet0_nic_eip0, aws_resource_id ] }
        - ' '''
        - 'sudo rpm -i http://repository.cloudifysource.org/cloudify/4.0.1/sp-release/cloudify-4.0.1~sp.el6.x86_64.rpm'
        - ''''
      Step0c-Install-Cloudify-Manager:
        concat:
        - 'ssh -i '
        - { get_input: cloudify_key_file  }
        - ' '
        - { get_input: cloudify_image_username }
        - '@'
        - { get_attribute: [ subnet0_nic_eip0, aws_resource_id ] }
        - ' '''
        - 'cfy bootstrap --install-plugins /opt/cfy/cloudify-manager-blueprints/simple-manager-blueprint.yaml -i public_ip='
        - { get_attribute: [ subnet0_nic_eip0, aws_resource_id ] }
        - ' -i private_ip='
        - { get_attribute: [ cloudify_host, ip ] }
        - ' -i ssh_user='
        - { get_input: cloudify_image_username }
        - ' -i ssh_key_filename=~/.ssh/key.pem'
        - ' -i agents_user=ubuntu -i ignore_bootstrap_validations=false -i admin_username=admin -i admin_password=admin'
        - ''''

  Configuration:
    value:
      Step1-Initialize-Cloudify-Manager-CLI-Profile:
        concat:
          - 'cfy profiles use -s '
          - { get_input: cloudify_image_username }
          - ' -k '
          - { get_input: cloudify_key_file }
          - ' -u admin -p admin -t default_tenant '
          - { get_attribute: [ subnet0_nic_eip0, aws_resource_id ] }
      Step2-Upload-AWS-Plugin-Package-Centos: 'cfy plugins upload http://repository.cloudifysource.org/cloudify/wagons/cloudify-aws-plugin/1.4.9/cloudify_aws_plugin-1.4.9-py27-none-linux_x86_64-centos-Core.wgn'
      Step3-Upload-Diamond-Plugin-Package-Centos: 'cfy plugins upload http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-centos-Core.wgn'
      Step4-Upload-Diamond-Plugin-Package-Ubuntu: 'cfy plugins upload http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-Ubuntu-trusty.wgn'
      Step5-Create-AWS-Secrets:
        First-group:
          concat:
            - 'cfy secrets create -s '
            - { get_input: aws_access_key_id }
            - ' aws_access_key_id && cfy secrets create -s '
            - { get_input: aws_secret_access_key }
            - ' aws_secret_access_key && cfy secrets create -s '
            - { get_input: ec2_region_name }
            - ' ec2_region_name && cfy secrets create -s '
            - { get_input: ec2_region_endpoint }
            - ' ec2_region_endpoint && cfy secrets create -s '
            - { get_attribute: [ vpc, aws_resource_id ] }
            - ' vpc_id && cfy secrets create  -s '
            - { get_attribute: [ subnet0, aws_resource_id ] }
            - ' public_subnet_id && cfy secrets create -s '
            - { get_attribute: [ subnet1, aws_resource_id ] }
            - ' private_subnet_id && cfy secrets create -s '
            - { get_input: availability_zone }
            - ' availability_zone && cfy secrets create -s '
            - { get_input: ubuntu_trusty_image }
            - ' ubuntu_trusty_image && cfy secrets create -s '
            - ''''
            - { get_attribute: [ agent_key, public_key_export ] }
            - ''''
            - ' agent_key_public'
        # THIS DOESNT WORK
        Second-group-REMOVE_BACKSLASHES_AROUND_COMMAND_KEEP_DOUBLE_QUOTES:
          concat:
            - 'cfy secrets create '
            - 'agent_key_private -s '
            - '"$(<'
            - { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name } ] }
            - ')"'

  Demo:
    value:
      Step6-Execute-Nodecellar-Demo: 'cfy install https://github.com/cloudify-examples/nodecellar-auto-scale-auto-heal-blueprint/archive/4.0.1.zip -b demo -n aws-haproxy-blueprint.yaml'
