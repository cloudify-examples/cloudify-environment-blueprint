tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/gcp-plugin/1.0/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml
  - imports/manager-configuration.yaml

inputs:

  client_x509_cert_url:
    type: string

  client_email:
    type: string

  client_id:
    type: string

  project_id:
    type: string

  private_key_id:
    type: string

  private_key:
    type: string

  zone:
    default: us-east1-b

  region:
    default: us-east1

  network_subnet0_cidr:
    default: 10.11.12.0/22

  network_subnet1_cidr:
    default: 10.11.16.0/22

  resource_prefix:
    default: cfy

  cloudify_image_username:
    default: centos

  local_ssh_directory:
    default: '~/.ssh/'

  manager_key_name:
    default: cfy-manager-key

  cloudify_key_file:
    default: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }

  cloudify_image:
    default: https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20170523

  centos_core_image:
    default: https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20170523

  ubuntu_trusty_image:
    default: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20170517

  small_instance_type:
    default: n1-standard-2

  manager_ip:
    description: >
      Resolving the IP for manager setup.
    default: { get_attribute: [ cloudify_host, networkInterfaces, 0, accessConfigs, 0, natIP ] }

  secrets:
    description: >
      key, value pairs of secrets used in AWS blueprint examples.
    default:
    - key: client_x509_cert_url
      value: { get_input: client_x509_cert_url }
    - key: client_email
      value: { get_input: client_email }
    - key: client_id
      value: { get_input: client_id }
    - key: project_id
      value: { get_input: project_id }
    - key: private_key_id
      value: { get_input: private_key_id }
    - key: private_key
      value: { get_input: private_key }
    - key: management_network_name
      value: { get_property: [ network, name ] }
    - key: zone
      value: { get_input: zone }
    - key: region
      value: { get_input: region }
    - key: management_subnetwork_name
      value: { get_property: [ network_subnet0, name ] }
    - key: private_subnetwork_name
      value: { get_property: [ network_subnet1, name ] }
    - key: ubuntu_trusty_image
      value: { get_input: ubuntu_trusty_image }
    - key: centos_core_image
      value: { get_input: centos_core_image }
    - key: small_instance_type
      value: { get_input: small_instance_type }
    - key: agent_key_public
      value: { get_attribute: [ manager_key, public_key_export ] }
    - key: agent_key_private
      value: { get_attribute: [ manager_key, private_key_export ] }

  create_inputs:
    default:
      local_private_key: { get_input: cloudify_key_file  }
      rpm_package: { get_input: cli_package_url }
      public_ip: { get_input: manager_ip }
      private_ip: { get_attribute: [ cloudify_host, ip ] }
      ssh_user: { get_input: cloudify_image_username }
      ssh_key_filename:
        concat:
        - '/home/'
        - { get_input: cloudify_image_username }
        - '/.ssh/key.pem'

dsl_definitions:

  client_config: &client_config
    auth:
      type: service_account
      auth_uri: https://accounts.google.com/o/oauth2/auth
      token_uri: https://accounts.google.com/o/oauth2/token
      auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
      client_x509_cert_url: { get_input: client_x509_cert_url }
      client_email: { get_input: client_email }
      client_id: { get_input: client_id }
      project_id: { get_input: project_id }
      private_key_id: { get_input: private_key_id }
      private_key: { get_input: private_key }
    project: { get_input: project_id }
    zone: { get_input: zone }

node_templates:

  manager_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: manager_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'network' ] }
      auto_subnets: false

  network_subnet0:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'network_subnet0' ] }
      subnet: { get_input: network_subnet0_cidr }
      region: { get_input: region }
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  network_subnet1:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'network_subnet1' ] }
      subnet: { get_input: network_subnet1_cidr }
      region: { get_input: region }
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  cloudify_security_group:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'cloudify_security_group' ] }
      sources:
        - 0.0.0.0/0
      allowed:
        tcp: [22, 80, 443]
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  cloudify_security_group1:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'cloudify_security_group1' ] }
      sources:
        - { get_property: [ network_subnet0, subnet ] }
        - { get_property: [ network_subnet1, subnet ] }
      allowed:
        tcp: [5671, 8101, 53333, 8300, 8301, 8500, 22000, 15432]
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  controller_key:
    type: cloudify.gcp.nodes.KeyPair
    properties:
      use_external_resource: true
      gcp_config: *client_config
      private_key_path: { get_property: [ manager_key, resource_config, private_key_path ] }
      public_key_path: { get_property: [ manager_key, resource_config, public_key_path ] }
      user: { get_input: cloudify_image_username }
    relationships:
      - type: cloudify.relationships.depends_on
        target: manager_key

  cloudify_host:
    type: cloudify.gcp.nodes.Instance
    properties:
      name: { concat: [ { get_input: resource_prefix }, 'cloudify_host' ] }
      gcp_config: *client_config
      image_id: { get_input: cloudify_image }
      instance_type: { get_input: small_instance_type }
      zone: { get_input: zone }
      agent_config:
        install_method: none
      external_ip: true
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network_subnet0
    - type: cloudify.gcp.relationships.instance_connected_to_keypair
      target: controller_key
