tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/gcp-plugin/1.0/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml
  - imports/manager-configuration.yaml

inputs:

  gcp_auth_file:
    description: PATH TO YOUR GCP AUTH JSON FILE

  gcp_project_name:
    description: YOUR GCP PROJECT ID

  gcp_zone:
    default: us-east1-b

  gcp_region:
    default: us-east1

  network_subnet0_cidr:
    default: 10.11.12.0/22

  network_subnet1_cidr:
    default: 10.11.16.0/22

  resource_prefix:
    default: cfy

  cloudify_image_username:
    default: centos

  local_ssh_directory:
    default: '~/.ssh/'

  manager_key_name:
    default: cfy-manager-key

  agent_key_name:
    default: cfy-agent-key

  cloudify_key_file:
    default: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }

  cloudify_key_file_pub:
    default: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name } ] }

  cloudify_image:
    default: https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20170523

  gcp_small_instance_type:
    default: n1-standard-2

  gcp_ubuntu_trusty_image:
    default: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20170517

  manager_ip:
    description: >
      Resolving the IP for manager setup.
    default: { get_attribute: [ network_subnet0_staticip, address ] }

  plugin_urls:
    description: >
      Plugins used in AWS blueprint examples.
    default:
    - https://github.com/cloudify-incubator/cloudify-utilities-plugin/releases/download/1.2.5/cloudify_utilities_plugin-1.2.5-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-gcp-plugin/1.0/cloudify_gcp_plugin-1.0-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-Ubuntu-trusty.wgn

  secrets:
    description: >
      key, value pairs of secrets used in AWS blueprint examples.
    default:
    - key: gcp_auth_file
      value: { get_input: gcp_auth_file }
    - key: gcp_project_name
      value: { get_input: gcp_project_name }
    - key: gcp_management_network_name
      value: { get_property: [ network, name ] }
    - key: gcp_zone
      value: { get_input: gcp_zone }
    - key: gcp_region
      value: { get_input: gcp_region }
    - key: gcp_management_subnetwork_name
      value: { get_property: [ network_subnet0, name ] }
    - key: gcp_private_subnetwork_name
      value: { get_property: [ network_subnet1, name ] }
    - key: gcp_ubuntu_trusty_image
      value: { get_input: gcp_ubuntu_trusty_image }
    - key: gcp_small_instance_type
      value: { get_input: gcp_small_instance_type }
    - key: agent_key_public
      value: { get_attribute: [ agent_key, public_key_export ] }
    - key: agent_key_private
      value: { get_attribute: [ agent_key, private_key_export ] }

  create_inputs:
    default:
      local_private_key: { get_input: cloudify_key_file  }
      rpm_package: { get_input: cli_package_url }
      public_ip: { get_input: manager_ip }
      private_ip: { get_attribute: [ cloudify_host, ip ] }
      ssh_user: { get_input: cloudify_image_username }
      ssh_key_filename:
        concat:
        - '/home/'
        - { get_input: cloudify_image_username }
        - '/.ssh/key.pem'

dsl_definitions:
  client_config: &client_config
    auth: { get_input: gcp_auth_file }
    project: { get_input: gcp_project_name }
    zone: { get_input: gcp_zone }

node_templates:

  manager_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: manager_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: agent_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  network_subnet0_staticip:
    type: cloudify.gcp.nodes.Address
    properties:
      region: { get_input: gcp_region }
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 's0ip0' ] }

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'network' ] }
      auto_subnets: false

  network_subnet0:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'network_subnet0' ] }
      subnet: { get_input: network_subnet0_cidr }
      region: { get_input: gcp_region }
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  network_subnet1:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'network_subnet1' ] }
      subnet: { get_input: network_subnet1_cidr }
      region: { get_input: gcp_region }
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network

  cloudify_security_group:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'cloudify_security_group' ] }
      sources:
        - 0.0.0.0/0
      allowed:
        tcp: [22, 80, 443]
        icmp:
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  cloudify_security_group1:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'cloudify_security_group1' ] }
      sources:
        - { get_property: [ network_subnet0, subnet ] }
        - { get_property: [ network_subnet1, subnet ] }
      allowed:
        tcp: [5671, 8101, 53333, 8300, 8301, 8500, 22000, 15432]
    relationships:
      - type: cloudify.relationships.connected_to
        target: network

  controller_key:
    type: cloudify.gcp.nodes.KeyPair
    properties:
      use_external_resource: true
      gcp_config: *client_config
      private_key_path: { get_property: [ manager_key, resource_config, private_key_path ] }
      public_key_path: { get_property: [ manager_key, resource_config, public_key_path ] }
      user: { get_input: cloudify_image_username }
    relationships:
      - type: cloudify.relationships.depends_on
        target: manager_key

  cloudify_host:
    type: cloudify.gcp.nodes.Instance
    properties:
      name: { concat: [ { get_input: resource_prefix }, 'cloudify_host' ] }
      gcp_config: *client_config
      image_id: { get_input: cloudify_image }
      instance_type: { get_input: gcp_small_instance_type }
      zone: { get_input: gcp_zone }
      agent_config:
        install_method: none
    relationships:
    - type: cloudify.gcp.relationships.contained_in_network
      target: network_subnet0
    - type: cloudify.gcp.relationships.instance_connected_to_ip
      target: network_subnet0_staticip
    - type: cloudify.gcp.relationships.instance_connected_to_keypair
      target: controller_key

outputs:

  1-Instructions:
    value: { get_attribute: [ ManagerSetup, final_path ] }
  2-Demo:
    value: ' '
  a.:
    value: 'Download https://github.com/Cloudify-PS/nodecellar-auto-scale-auto-heal-blueprint/archive/gcp_blueprint.zip'
  b.:
    value: 'Unzip gcp_blueprint.zip'
  c.:
    value: 'Run cd nodecellar-auto-scale-auto-heal-blueprint-gcp_blueprint'
  d.:
    value: 'Add the gcp_auth file content to gcp-blueprint.yaml in auth under dsl_definitions'
  e.:
    value: 'Run cfy install gcp-blueprint.yaml -b demo'
