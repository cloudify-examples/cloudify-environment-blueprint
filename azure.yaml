tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/4.5/types.yaml
  - https://cloudify.co/spec/azure-plugin/1.8.0/plugin.yaml
  - https://cloudify.co/spec/utilities-plugin/1.9.0/plugin.yaml
  - https://cloudify.co/spec/fabric-plugin/1.5.1/plugin.yaml
  - imports/manager-configuration.yaml

inputs:

  subscription_id:
    type: string

  tenant_id:
    type: string

  client_id:
    type: string

  client_secret:
    type: string

  endpoint_resource:
    default: https://management.core.windows.net/

  endpoints_resource_manager:
    default: https://management.azure.com

  endpoint_verify:
    default: True

  endpoint_storage:
    type: string
    default: core.windows.net

  endpoints_active_directory:
    type: string
    default: https://login.microsoftonline.com

  location:
    default: eastus

  retry_after:
    default: 5

  resource_prefix:
    default: cfy

  resource_suffix:
    default: 0

  cloudify_image_username:
    default: centos

  local_ssh_directory:
    default: '~/.ssh/'

  manager_key_name:
    default: cfy-manager-key-azure

  agent_key_name:
    default: cfy-agent-key-azure

  cloudify_key_file:
    default: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }

  centos_core_image_publisher:
    default: OpenLogic

  centos_core_image_offer:
    default: CentOS

  centos_core_image_sku:
    default: '7-CI'

  centos_core_image_version:
    default: latest

  ubuntu_trusty_image_publisher:
    default: Canonical

  ubuntu_trusty_image_offer:
    default: UbuntuServer

  ubuntu_trusty_image_sku:
    default: 14.04.4-LTS

  ubuntu_trusty_image_version:
    default: 14.04.201604060

  large_image_size:
    default: Standard_A4

  small_image_size:
    default: Standard_A0

  private_ip:
    description: >
      Resolving the IP for manager setup.
    default: { get_attribute: [ cloudify_host, ip ] }

  public_ip:
    description: >
      Resolving the IP for manager setup.
    default: { get_attribute: [ cloudify_host, public_ip ] }

  network_api_version:
    description: >
      API Version for Network
    default: "2015-06-15"

  secrets:
    description: >
      key, value pairs of secrets used in AWS blueprint examples.
    default:
    - key: subscription_id
      value: { get_input: subscription_id }
    - key: tenant_id
      value: { get_input: tenant_id }
    - key: client_id
      value: { get_input: client_id }
    - key: client_secret
      value: { get_input: client_secret }
    - key: location
      value: { get_input: location }
    - key: azure_subscription_id
      value: { get_input: subscription_id }
    - key: azure_tenant_id
      value: { get_input: tenant_id }
    - key: azure_client_id
      value: { get_input: client_id }
    - key: azure_client_secret
      value: { get_input: client_secret }
    - key: azure_location
      value: { get_input: location }
    - key: mgr_resource_group_name
      value: { get_attribute: [ resource_group, name ] }
    - key: mgr_virtual_network_name
      value: { get_attribute: [ virtual_network, name ] }
    - key: mgr_subnet_name
      value: { get_attribute: [ subnet0, name ] }
    - key: ubuntu_trusty_image_publisher
      value: { get_input: ubuntu_trusty_image_publisher }
    - key: ubuntu_trusty_image_offer
      value: { get_input: ubuntu_trusty_image_offer }
    - key: ubuntu_trusty_image_sku
      value: { get_input: ubuntu_trusty_image_sku }
    - key: ubuntu_trusty_image_version
      value: { get_input: ubuntu_trusty_image_version }
    - key: centos_core_image_publisher
      value: { get_input: centos_core_image_publisher }
    - key: centos_core_image_offer
      value: { get_input: centos_core_image_offer }
    - key: centos_core_image_sku
      value: { get_input: centos_core_image_sku }
    - key: centos_core_image_version
      value: { get_input: centos_core_image_version }
    - key: small_image_size
      value: { get_input: small_image_size }
    - key: large_image_size
      value: { get_input: large_image_size }
    - key: agent_key_public
      value: { get_attribute: [ agent_key, public_key_export ] }
    - key: agent_key_private
      value: { get_attribute: [ agent_key, private_key_export ] }

dsl_definitions:

  azure_configuration: &client_config
    subscription_id: { get_input: subscription_id }
    tenant_id: { get_input: tenant_id }
    client_id: { get_input: client_id }
    client_secret: { get_input: client_secret }
    endpoint_resource: { get_input: endpoint_resource }
    endpoints_resource_manager: { get_input: endpoints_resource_manager }
    endpoint_verify: { get_input: endpoint_verify }
    endpoints_active_directory: { get_input: endpoints_active_directory }

node_templates:

  manager_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: manager_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: agent_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      azure_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'rg', { get_input: resource_suffix } ] }
      location: { get_input: location }

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      azure_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'sa', { get_input: resource_suffix } ] }
      location: { get_input: location }
      resource_config:
        accountType: Standard_LRS
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group

  availability_set:
    type: cloudify.azure.nodes.compute.AvailabilitySet
    properties:
      azure_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'as', { get_input: resource_suffix } ] }
      location: { get_input: location }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  subnet0_nic_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 's0ip', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group

  virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 'vn', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group

  security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 'sg', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
        - name: all_tcp
          properties:
            description: All TCP
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: '*'
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 100
            access: Allow
            direction: Inbound
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group

  subnet0:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 's0', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        addressPrefix: 10.10.0.0/24
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network

  subnet1:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 's1', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        addressPrefix: 10.10.1.0/24
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network
    - type: cloudify.relationships.depends_on
      target: subnet0

  subnet0_nic_ip_configuration:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 's0ipc', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group
      - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
        target: subnet0
      - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
        target: subnet0_nic_ip

  subnet1_nic_ip_configuration:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 's1ipc', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group
      - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
        target: subnet1

  subnet0_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 's0nic', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      primary: true
    relationships:
      - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
        target: subnet0_nic_ip_configuration
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group
      - type: cloudify.azure.relationships.nic_connected_to_network_security_group
        target: security_group

  subnet1_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      azure_config: *client_config
      api_version: { get_input: network_api_version }
      name: { concat: [ { get_input: resource_prefix }, 's1nic', { get_input: resource_suffix } ] }
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      primary: false
    relationships:
      - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
        target: subnet1_nic_ip_configuration
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group
      - type: cloudify.azure.relationships.nic_connected_to_network_security_group
        target: security_group

  cloudify_host:
    type: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      azure_config: *client_config
      name: { concat: [ { get_input: resource_prefix }, 'cfy', { get_input: resource_suffix } ] }
      location: { get_input: location }
      os_family: linux
      resource_config:
        hardwareProfile:
          vmSize: { get_input: large_image_size }
        storageProfile:
          imageReference:
            publisher: { get_input: centos_core_image_publisher }
            offer: { get_input: centos_core_image_offer }
            sku: { get_input: centos_core_image_sku }
            version: { get_input: centos_core_image_version }
        osProfile:
          customData:
            concat:
            - |
              $!/bin/bash
            - { concat: [ 'usermod -aG wheel', { get_input: cloudify_image_username } ] }
            - |
              yum install -y python-backports-ssl_match_hostname python-setuptools python-backports
          computerName: { get_property: [SELF, name] }
          adminUsername: { get_input: cloudify_image_username }
          adminPassword: ''
          linuxConfiguration:
            ssh:
              publicKeys:
              - keydata: { get_attribute: [ manager_key, public_key_export ] }
                path: { concat: [ '/home/', { get_input: cloudify_image_username }, '/.ssh/authorized_keys' ] }
            disablePasswordAuthentication: true
      agent_config:
        install_method: none
      storage_endpoint: { get_input: endpoint_storage }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: pkg.cloudify_azure.resources.compute.virtualmachine.create
          inputs:
            args: { get_property: [ SELF, resource_config ] }
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group
      - type: cloudify.azure.relationships.connected_to_storage_account
        target: storage_account
      - type: cloudify.azure.relationships.connected_to_nic
        target: subnet0_nic
      - type: cloudify.azure.relationships.connected_to_nic
        target: subnet1_nic

outputs:

  manager_ip:
    value: { get_input: public_ip }
